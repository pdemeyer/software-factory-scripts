
node {
    
	def rootDir = pwd()
    def slacknotifier = load "${rootDir}@script/lib/notification_slack.groovy"
    def solutionimporter = load "${rootDir}@script/lib/solution_import.groovy"
    def solutionexporter = load "${rootDir}@script/lib/solution_export.groovy"
    
    
   def servoyHome = "C:/Servoy"
   def servoyDeveloperHome = "${servoyHome}/developer"
   def servoyAppServerHome = "${servoyHome}/application_server"
   def equinoxJar = "${servoyDeveloperHome}/plugins/org.eclipse.equinox.launcher_1.3.0.v20130327-1440.jar"
   
   def workspaceSolutionsDir = "globis_online_repo"
   def servoyPropertiesDir = "${workspaceSolutionsDir}/build_files/servoy_properties_file"
   
   def exportServoyProperties = "${servoyPropertiesDir}/exporter_servoy.properties"
   
   def exportOutputFolder = "deployments"
   
   def solutionsToExport = "globis_deployment,globis_framework,globis_metadata,globis_webservice,globis_webservice_system"
   
   def versionInfoFilePath = "${workspaceSolutionsDir}/build_files/VersionInfo.txt"
   
   def versionEnvironmentPrefix = "INT-"
   def versionNumber = ""
   def versionTag = "10.3.12-DEBUG"
   def versionComment = "test comment"
   
   def sourcesBranchName = "*/master"
   def artefactsBranchName = "master"
   def publishFilesPattern = '*.servoy'
   def releaseFilesPattern = "*.xml"
   
   def releaseFileExporterUrl = "192.168.73.235:8090"
   def metadataSolutionFile = "globis_metadata.servoy"
   def webserviceSolutionFile = "globis_webservice.servoy"
   def webserviceSystemSolutionFile = "globis_webservice_system.servoy"
   
   
   try {
   stage('settings log') {
	slacknotifier.notifyBuild('STARTED')
	
    echo "${servoyHome}"
    echo "${servoyDeveloperHome}"
    echo "${workspaceSolutionsDir}"
    echo "${servoyPropertiesDir}"
    echo "${exportServoyProperties}"
    
   }
   
   stage('Get Globis source code from GIT') { // for display purposes
      checkout([$class: 'GitSCM', 
                branches: [[name: "${sourcesBranchName}"]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'RelativeTargetDirectory', 
                relativeTargetDir: 'globis_online_repo']], 
                submoduleCfg: [], 
                userRemoteConfigs: [[url: 'git@github_jenkins:globisnv/globis-online.git']]])
   }
    
    stage('Read configuration') {
        def d = [test: 'Default', something: 'Default', other: 'Default']
        def props = readProperties defaults: d, file: "${versionInfoFilePath}", text: 'other=Override'

        versionNumber = props["GLOBIS_VERSION_NUMBER"]
    }
       
    stage('Define Version, Tag, Commit message'){
        def buildNumber = VersionNumber projectStartDate: '1970-01-01', versionNumberString: '${BUILD_ID}', versionPrefix: ''
        versionTag = versionEnvironmentPrefix + versionNumber + "-" + buildNumber
        
        currentBuild.description = versionTag
    }
    
    stage('Export Solution files') {
       solutionexporter.exportSolutions(${equinoxJar}, ${servoyAppServerHome}, ${solutionsToExport}, ${exportOutputFolder}, ${exportServoyProperties})
   }
   
   stage('Deploy To Release file exporter') {
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${metadataSolutionFile}", releaseFileExporterUrl, false)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${webserviceSolutionFile}", releaseFileExporterUrl, true)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${webserviceSystemSolutionFile}", releaseFileExporterUrl, true)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   }
   
   
   } catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    slacknotifier.notifyBuild(currentBuild.result)
  }
}


