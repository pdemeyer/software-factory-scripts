

node {

	def rootDir = pwd()
    def slacknotifier = load "${rootDir}@script/lib/notification_slack.groovy"
    def solutionimporter = load "${rootDir}@script/lib/solution_import.groovy"
    def servoyUtils = load "${rootDir}@script/lib/servoy_utils.groovy"
    def gitUtils = load "${rootDir}@script/lib/git_utils.groovy"

  try {
      
    def servoyHome = "C:/Servoy"
   def servoyDeveloperHome = "${servoyHome}/developer"
   def servoyAppServerHome = "${servoyHome}/application_server"
   def equinoxJar = "${servoyDeveloperHome}/plugins/org.eclipse.equinox.launcher_1.3.0.v20130327-1440.jar"
   
   def workspaceSolutionsDir = "globis_online_repo"
   def servoyPropertiesDir = "${workspaceSolutionsDir}/build_files/servoy_properties_file"
   
   def exportServoyProperties = "${servoyPropertiesDir}/exporter_servoy.properties"
   
   def exportOutputFolder = "deployments"
   
   def versionInfoFilePath = "${workspaceSolutionsDir}/build_files/VersionInfo.txt"
   
   def versionEnvironmentPrefix = "TST-"
   def versionNumber = ""
   def versionTag = "10.3.11-TST"
   def versionComment = "test comment"
   
   def artefactsBranchName = env.artefactsBranchName 
   def publishFilesPattern = '*.servoy'
   def releaseFilesPattern = "*.xml"
   
   def targetServerUrl = env.targetServerUrl
   
   def metadataSolutionFile = "globis_metadata.servoy"
   def webserviceSolutionFile = "globis_webservice.servoy"
   def webserviceSystemSolutionFile = "globis_webservice_system.servoy"
   def deploymentSolutionFile = "globis_deployment.servoy"
   def deploymentCustomersSolutionFile = "globis_deployment_customers.servoy"
   
   
    stage('settings log') {
	    slacknotifier.notifyBuild('STARTED')
	
        echo "${servoyHome}"
        echo "${servoyDeveloperHome}"
        echo "${workspaceSolutionsDir}"
        echo "${servoyPropertiesDir}"
        echo "${exportServoyProperties}"
   }
     
    stage('Sync artifacts GIT') { // for display purposes
          checkout([$class: 'GitSCM', 
                    branches: [[name: "${artefactsBranchName}"]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', 
                    relativeTargetDir: "${exportOutputFolder}"]], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'git@github_jenkins:globisnv/globis-artifacts.git']]])
    }
    
    stage('Set build description') {
    
    	def out_str = gitUtils.getLastCommitMessage(exportOutputFolder)
    	echo out_str
    	
    	currentBuild.description = out_str
	
    }
    
    stage('Import webservice for truncate') {
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${webserviceSystemSolutionFile}", targetServerUrl, true)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   }
   
	stage('Restart Servoy -1') {
		servoyUtils.restartServer(targetServerUrl)
	}
    
	stage('Truncate Repository') {
		servoyUtils.truncateRepositoryDb(targetServerUrl)
	}
   
	stage('Restart Servoy - 2') {
		servoyUtils.restartServer(targetServerUrl)
	}
      
   	stage ('Import solution on server') {
   	     solutionimporter.importSolutions("${exportOutputFolder}/${deploymentCustomersSolutionFile}", targetServerUrl, false)
   	}
   
	stage('Restart Servoy - 3') {
		servoyUtils.restartServer(targetServerUrl)
	}
   
} catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
} finally {
    // Success or failure, always send notifications
    slacknotifier.notifyBuild(currentBuild.result)
}
}


