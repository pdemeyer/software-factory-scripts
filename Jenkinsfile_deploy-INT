

node {

	def rootDir = pwd()
    def slacknotifier = load "${rootDir}@script/lib/notification_slack.groovy"
    def solutionimporter = load "${rootDir}@script/lib/solution_import.groovy"
    def servoyUtils = load "${rootDir}@script/lib/servoy_utils.groovy"

  try {
      
    def servoyHome = "C:/Servoy"
   def servoyDeveloperHome = "${servoyHome}/developer"
   def servoyAppServerHome = "${servoyHome}/application_server"
   def equinoxJar = "${servoyDeveloperHome}/plugins/org.eclipse.equinox.launcher_1.3.0.v20130327-1440.jar"
   
   def workspaceSolutionsDir = "globis_online_repo"
   def servoyPropertiesDir = "${workspaceSolutionsDir}/build_files/servoy_properties_file"
   
   def exportServoyProperties = "${servoyPropertiesDir}/exporter_servoy.properties"
   
   def exportOutputFolder = "deployments"
   
   def versionInfoFilePath = "${workspaceSolutionsDir}/build_files/VersionInfo.txt"
   
   def versionEnvironmentPrefix = ""
   def versionNumber = ""
   def versionTag = "10.3.12-DEBUG"
   def versionComment = "test comment"
   
   def artefactsBranchName = "master"
   def publishFilesPattern = '*.servoy'
   def releaseFilesPattern = "*.xml"
   
   def releaseFileShare = "\\\\192.168.73.159\\ReleaseFiles"
   def releaseFileShareEscaped = "\\\\\\\\192.168.73.159\\\\ReleaseFiles"
   
   def targetServerUrl = "192.168.73.159:8090"
   
   def metadataSolutionFile = "globis_metadata.servoy"
   def webserviceSolutionFile = "globis_webservice.servoy"
   def webserviceSystemSolutionFile = "globis_webservice_system.servoy"
   def deploymentSolutionFile = "globis_deployment.servoy"
      
   def ownerIdsEscaped = /[
						 "88888888-8888-8888-8888-888888888888"
						,"987C0200-C534-42CF-869B-329137B15750"
   						 ]/
   						 
   						 /*
						,"3681ABF4-698E-4098-911D-CD20748F5E82"
						,"7A075821-FB51-4182-87DA-0209F5B885FF"
						,"ADE2B37F-0485-4B07-8B5B-96B6294B4FDD"
						,"3A54BC06-E247-4223-8DA3-884DBAE64567"
						,"7F77171E-7900-457F-B105-62F6159836A2"
						,"1FC75FDB-9671-4F85-864C-AA31B0E91C77"
						,"6553DAFF-15B6-4B89-9968-94A8E64B9440"
						,"51CB683F-54FD-4E6F-A644-07CFC06FF34F"
						,"4134EF5C-317B-40C2-AC32-5E2AA0BA3C7F"
						,"4F482099-7B7B-4CB3-B836-1DC3D184079B"
						,"85DC780E-C961-49C8-ACF6-83B02882095C"
						,"1D6F949D-248F-4C7F-B682-240CD7C5BD0E"
						,"1F837148-F6B3-4112-A8F0-C95360F56398"
						,"18C5935B-32DC-4C41-B993-B0BC8F93FD3E"
						,"97B26F67-5E89-4B6C-BD8E-ED9161B44450"
						,"CF407AF9-B714-4B53-A1A0-66AF3D9DC147"
						,"D553453F-6C45-4606-9821-FDEC64E09A4E"
						,"C631A5C7-D7B6-4CCA-B613-DD74B259B717"
						,"89A8664F-D0D3-4135-A3BD-45F9E033F055"
						,"9072A79C-9F67-432B-A902-902B68286DDD"
						,"B2154CEB-E360-4984-B111-4307E428104A"
						,"9DA8F0E6-669B-48B6-AB79-FBC6DD8788D5"
						,"7C86514C-031B-461F-A436-1EA5B5F50C8C"
						,"1D888480-33A9-4FE7-942D-C966FA91B6C2"
						,"DD563A58-8346-406C-B3E5-1B8FB69FB704"
						,"28ADA64E-B635-4BA5-A5E8-5E06F943D32A"
						,"2C068937-34C4-466E-8F37-D6EEF741A89B"
						,"45371B2F-929B-465A-94F4-C4C13B87C4CC"
						,"19E97C1A-4924-48D7-A3D0-1E401B078448"
						,"3D1094EC-5DC2-4FBC-8264-D33D5AEA47A6"
						,"517A8F54-8F03-4E01-8B09-B45A33732EDD"
						,"A943C215-713F-4F12-B7DF-00D085A8AB65"
						,"AB9FF2BD-11FD-4EBD-BF81-029B46BEBE33"
						,"66E8F05C-6A7F-4D85-9545-3FC4300AAA27"
						,"301FACD1-6062-45B2-A840-95ECD69CA579"
						,"C13AA845-140D-4683-8105-7DA66961E9E1"
						,"81AF4952-AFC2-4777-A7DF-8F62D3A00BE8"
						,"C89289C1-327D-453F-91C8-8EF2BD87840F"
						,"AEE2ADF9-EE6D-4986-94AB-331226C75426"
						,"ECBC0172-62CF-49BC-9FE4-87290B1F1255"
						,"48D2184E-36D0-4C59-B84A-0C6B902FA8E4"
						,"59895C26-DCB2-43FE-A9D6-79B93B633332"
						,"C8845362-17CE-4AB5-92F4-5A96EE739C39"
						,"FB5C7591-8B11-4D64-9F33-5B4451670DE9"
						,"D4609E70-CF43-4955-BA40-974FD7052608"
						,"62DD90D1-B31A-4B54-8219-9B39B7D43022"
						*/
   
    stage('settings log') {
	    slacknotifier.notifyBuild('STARTED')
	
        echo "${servoyHome}"
        echo "${servoyDeveloperHome}"
        echo "${workspaceSolutionsDir}"
        echo "${servoyPropertiesDir}"
        echo "${exportServoyProperties}"
   }
     
    stage('Sync artifacts GIT') { // for display purposes
          // Get some code from a GitHub repository
          checkout([$class: 'GitSCM', 
                    branches: [[name: "${artefactsBranchName}"]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', 
                    relativeTargetDir: "${exportOutputFolder}"]], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'git@github_jenkins:globisnv/globis-artifacts.git']]])
    }
    
    /*
    stage('Copy over release files to import folder') {
        bat script: "xcopy /s /Y \"${exportOutputFolder}\\${releaseFilesPattern}\" \"${releaseFileShare}\"" 
    }
    */
    
    /*
    stage('Deploy Webservice solutions') {
  
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${webserviceSolutionFile}", targetServerUrl, true)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${webserviceSystemSolutionFile}", targetServerUrl, true)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   }
   */
   
   /*
	stage('Restart Servoy') {
		servoyUtils.restartServer(targetServerUrl)
	}
	*/
    
    stage('Import Release files') {
       httpRequest acceptType: "APPLICATION_JSON", 
            consoleLogResponseBody: true, 
            contentType: "APPLICATION_JSON", 
            httpMode: 'POST', 
            requestBody: "{server_path: \"${releaseFileShareEscaped}\", owner_ids: ${ownerIdsEscaped} }", 
            timeout: 600, 
            url: "http://${targetServerUrl}/servoy-service/api_v1/88888888-8888-8888-8888-888888888888/admin/importreleasefiles"
            //, 
            //validResponseContent: '{"messages":[]}'
   }
      
      /*
   stage ('Import solution on server') {
        solutionimporter.importSolutions("${exportOutputFolder}/${deploymentSolutionFile}", targetServerUrl, false)
   }
   */
} catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
} finally {
    // Success or failure, always send notifications
    slacknotifier.notifyBuild(currentBuild.result)
}
}


