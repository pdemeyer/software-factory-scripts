

node {

	def rootDir = pwd()
    def slacknotifier = load "${rootDir}@script/lib/notification_slack.groovy"
    def solutionimporter = load "${rootDir}@script/lib/solution_import.groovy"

  try {
      
    def servoyHome = "C:/Servoy"
   def servoyDeveloperHome = "${servoyHome}/developer"
   def servoyAppServerHome = "${servoyHome}/application_server"
   def equinoxJar = "${servoyDeveloperHome}/plugins/org.eclipse.equinox.launcher_1.3.0.v20130327-1440.jar"
   
   def workspaceSolutionsDir = "globis_online_repo"
   def servoyPropertiesDir = "${workspaceSolutionsDir}/build_files/servoy_properties_file"
   
   def exportServoyProperties = "${servoyPropertiesDir}/exporter_servoy.properties"
   
   def exportOutputFolder = "deployments"
   
   def versionInfoFilePath = "${workspaceSolutionsDir}/build_files/VersionInfo.txt"
   
   def versionEnvironmentPrefix = ""
   def versionNumber = ""
   def versionTag = "10.3.12-DEBUG"
   def versionComment = "test comment"
   
   def artefactsBranchName = "master"
   def publishFilesPattern = '*.servoy'
   def releaseFilesPattern = "*.xml"
   
   def releaseFileShare = "\\\\192.168.73.159\\ReleaseFiles"
   def releaseFileShareEscaped = "\\\\\\\\192.168.73.159\\\\ReleaseFiles"
   
   def targetServerUrl = "192.168.73.159:8090"
   
   def metadataSolutionFile = "globis_metadata.servoy"
   def webserviceSolutionFile = "globis_webservice.servoy"
   def webserviceSystemSolutionFile = "globis_webservice_system.servoy"
   def deploymentSolutionFile = "globis_deployment.servoy"
   
   
    stage('settings log') {
	    slacknotifier.notifyBuild('STARTED')
	
        echo "${servoyHome}"
        echo "${servoyDeveloperHome}"
        echo "${workspaceSolutionsDir}"
        echo "${servoyPropertiesDir}"
        echo "${exportServoyProperties}"
   }
     
    stage('Sync artifacts GIT') { // for display purposes
          // Get some code from a GitHub repository
          checkout([$class: 'GitSCM', 
                    branches: [[name: "${artefactsBranchName}"]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', 
                    relativeTargetDir: "${exportOutputFolder}"]], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'git@github_jenkins:globisnv/globis-artifacts.git']]])
    }
    
    stage('Copy over release files to import folder') {
        bat script: "xcopy /s /Y \"${exportOutputFolder}\\${releaseFilesPattern}\" \"${releaseFileShare}\"" 
    }
    
    stage('Deploy Webservice solutions') {
  
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${webserviceSolutionFile}", targetServerUrl, true)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   		try {
        	solutionimporter.importSolutions("${exportOutputFolder}/${webserviceSystemSolutionFile}", targetServerUrl, true)
		} catch (e) {
    		// If there was an exception thrown, the build failed
    		currentBuild.result = "FAILED"
    		throw e
		} 
   }
    
    stage('Import Release files') {
       httpRequest acceptType: "APPLICATION_JSON", 
            consoleLogResponseBody: true, 
            contentType: "APPLICATION_JSON", 
            httpMode: 'POST', 
            requestBody: "{server_path: \"${releaseFileShareEscaped}\", owner_ids: [\"88888888-8888-8888-8888-888888888888\"]}", 
            timeout: 60, 
            url: "http://${targetServerUrl}/servoy-service/api_v1/88888888-8888-8888-8888-888888888888/admin/importreleasefiles"
            //, 
            //validResponseContent: '{"messages":[]}'
   }
      
   stage ('Import solution on server') {
        solutionimporter.importSolutions("${exportOutputFolder}/${deploymentSolutionFile}", targetServerUrl, false)
   }
} catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
} finally {
    // Success or failure, always send notifications
    slacknotifier.notifyBuild(currentBuild.result)
}
}


